version: '3.8'

# Configuración de variables
x-common-variables: &common-variables
  POSTGRES_DB: ${POSTGRES_DB:-postgres}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}

x-monitoring-variables: &monitoring-variables
  PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
  GRAFANA_ENABLED: ${GRAFANA_ENABLED:-true}
  REPLICATION_ENABLED: ${REPLICATION_ENABLED:-false}

services:
  # PostgreSQL Database
  postgresql:
    build:
      context: ./docker
      dockerfile: Dockerfile.postgresql
    container_name: postgresql-db
    restart: unless-stopped
    environment:
      <<: *common-variables
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Configuración para replicación
      POSTGRES_REPLICATION_MODE: "master"
      POSTGRES_REPLICATION_USER: "replicator"
      POSTGRES_REPLICATION_PASSWORD: "replicator123"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - postgresql_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin4 Web Interface
  pgadmin:
    build:
      context: ./docker
      dockerfile: Dockerfile.pgadmin
    container_name: pgadmin4-web
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@postgresql.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: "False"
      PGADMIN_CONFIG_SESSION_COOKIE_SECURE: "False"
      PGADMIN_CONFIG_SESSION_COOKIE_HTTPONLY: "False"
      PGADMIN_CONFIG_SESSION_COOKIE_SAMESITE: "'Lax'"
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin-servers.json:/pgadmin4/servers.json
    networks:
      - postgresql_network
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/misc/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Replica (solo si REPLICATION_ENABLED=true)
  postgresql-replica:
    build:
      context: ./docker
      dockerfile: Dockerfile.postgresql-replica
    container_name: postgresql-replica
    restart: unless-stopped
    environment:
      <<: *common-variables
      POSTGRES_REPLICATION_MODE: "slave"
      POSTGRES_REPLICATION_USER: "replicator"
      POSTGRES_REPLICATION_PASSWORD: "replicator123"
      POSTGRES_MASTER_HOST: "postgresql-db"
      POSTGRES_MASTER_PORT: "5432"
    ports:
      - "${POSTGRES_REPLICA_PORT:-5433}:5432"
    volumes:
      - postgresql_replica_data:/var/lib/postgresql/data
    networks:
      - postgresql_network
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - replication

  # Prometheus (solo si PROMETHEUS_ENABLED=true)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - postgresql_network
    profiles:
      - monitoring

  # PostgreSQL Exporter
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgresql-exporter
    restart: unless-stopped
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres123@postgresql-db:5432/postgres?sslmode=disable"
    networks:
      - postgresql_network
    depends_on:
      postgresql:
        condition: service_healthy
    profiles:
      - monitoring

  # PostgreSQL Replica Exporter (solo si hay réplica)
  postgresql-replica-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgresql-replica-exporter
    restart: unless-stopped
    ports:
      - "${POSTGRES_REPLICA_EXPORTER_PORT:-9188}:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres123@postgresql-replica:5432/postgres?sslmode=disable"
    networks:
      - postgresql_network
    depends_on:
      postgresql-replica:
        condition: service_healthy
    profiles:
      - monitoring
      - replication

  # Grafana (solo si GRAFANA_ENABLED=true)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin123}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - postgresql_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgresql_data:
    driver: local
  postgresql_replica_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  postgresql_network:
    driver: bridge
    name: postgresql_network
