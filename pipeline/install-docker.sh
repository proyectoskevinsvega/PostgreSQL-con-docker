#!/bin/bash

# üê≥ PostgreSQL Docker - Install Docker Pipeline
# Script para instalar Docker autom√°ticamente y verificar la instalaci√≥n

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Funci√≥n para verificar si Docker est√° instalado
check_docker_installed() {
    if command -v docker >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Funci√≥n para verificar si Docker est√° funcionando
check_docker_running() {
    if docker info >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Funci√≥n para obtener la versi√≥n de Docker
get_docker_version() {
    if check_docker_installed; then
        docker --version | cut -d' ' -f3 | cut -d',' -f1
    else
        echo "Docker no est√° instalado"
    fi
}

# Funci√≥n para instalar Docker en Ubuntu/Debian
install_docker_ubuntu() {
    log "Instalando Docker en Ubuntu/Debian..."
    
    # Actualizar paquetes
    sudo apt-get update
    
    # Instalar prerequisitos
    sudo apt-get install -y \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    
    # Agregar clave GPG oficial de Docker
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # Configurar repositorio
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Actualizar paquetes
    sudo apt-get update
    
    # Instalar Docker Engine
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Agregar usuario al grupo docker
    sudo usermod -aG docker $USER
    
    success "Docker instalado correctamente en Ubuntu/Debian"
}

# Funci√≥n para instalar Docker en CentOS/RHEL
install_docker_centos() {
    log "Instalando Docker en CentOS/RHEL..."
    
    # Instalar prerequisitos
    sudo yum install -y yum-utils
    
    # Agregar repositorio de Docker
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    
    # Instalar Docker Engine
    sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Iniciar y habilitar Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Agregar usuario al grupo docker
    sudo usermod -aG docker $USER
    
    success "Docker instalado correctamente en CentOS/RHEL"
}

# Funci√≥n para instalar Docker en macOS
install_docker_macos() {
    log "Instalando Docker en macOS..."
    
    if command -v brew >/dev/null 2>&1; then
        # Instalar Docker Desktop via Homebrew
        brew install --cask docker
        success "Docker Desktop instalado via Homebrew"
    else
        error "Homebrew no est√° instalado. Instala Homebrew primero o descarga Docker Desktop manualmente."
        exit 1
    fi
}

# Funci√≥n para instalar Docker en Windows
install_docker_windows() {
    log "Instalando Docker en Windows..."
    
    if command -v winget >/dev/null 2>&1; then
        # Instalar Docker Desktop via winget
        winget install Docker.DockerDesktop
        success "Docker Desktop instalado via winget"
    else
        error "winget no est√° disponible. Descarga Docker Desktop manualmente desde https://www.docker.com/products/docker-desktop"
        exit 1
    fi
}

# Funci√≥n para detectar el sistema operativo
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            case $ID in
                ubuntu|debian)
                    echo "ubuntu"
                    ;;
                centos|rhel|fedora)
                    echo "centos"
                    ;;
                *)
                    echo "linux"
                    ;;
            esac
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Funci√≥n para verificar la instalaci√≥n de Docker
verify_docker_installation() {
    log "Verificando instalaci√≥n de Docker..."
    
    if ! check_docker_installed; then
        error "Docker no est√° instalado"
        return 1
    fi
    
    if ! check_docker_running; then
        warning "Docker est√° instalado pero no est√° funcionando"
        log "Intentando iniciar Docker..."
        
        # Intentar iniciar Docker
        if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start docker
            sudo systemctl enable docker
        fi
        
        # Esperar un momento
        sleep 5
        
        if ! check_docker_running; then
            error "No se pudo iniciar Docker"
            return 1
        fi
    fi
    
    # Verificar versi√≥n
    local version=$(get_docker_version)
    success "Docker est√° funcionando correctamente (versi√≥n: $version)"
    
    # Verificar Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        local compose_version=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
        success "Docker Compose est√° disponible (versi√≥n: $compose_version)"
    else
        warning "Docker Compose no est√° disponible"
    fi
    
    return 0
}

# Funci√≥n para mostrar informaci√≥n del sistema
show_system_info() {
    log "Informaci√≥n del sistema:"
    echo "  OS: $(uname -s)"
    echo "  Architecture: $(uname -m)"
    echo "  Kernel: $(uname -r)"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            echo "  Distribution: $PRETTY_NAME"
        fi
    fi
}

# Funci√≥n para mostrar ayuda
show_help() {
    cat << EOF
üê≥ PostgreSQL Docker - Install Docker Pipeline

Uso: $0 [OPCIONES]

OPCIONES:
    -h, --help              Mostrar esta ayuda
    -c, --check             Solo verificar si Docker est√° instalado
    -f, --force             Forzar reinstalaci√≥n de Docker
    -v, --verbose           Mostrar output detallado
    -s, --skip-verification Omitir verificaci√≥n post-instalaci√≥n

FUNCIONES:
    - Detecta autom√°ticamente el sistema operativo
    - Instala Docker en la √∫ltima versi√≥n disponible
    - Verifica la instalaci√≥n y funcionamiento
    - Configura permisos de usuario
    - Instala Docker Compose

SISTEMAS SOPORTADOS:
    - Ubuntu/Debian
    - CentOS/RHEL/Fedora
    - macOS (via Homebrew)
    - Windows (via winget)

EJEMPLOS:
    $0                      # Instalar Docker autom√°ticamente
    $0 -c                   # Solo verificar instalaci√≥n
    $0 -f                   # Forzar reinstalaci√≥n
    $0 -v                   # Modo verbose

EOF
}

# Variables por defecto
CHECK_ONLY=false
FORCE_INSTALL=false
VERBOSE=false
SKIP_VERIFICATION=false

# Parsear argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--check)
            CHECK_ONLY=true
            shift
            ;;
        -f|--force)
            FORCE_INSTALL=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -s|--skip-verification)
            SKIP_VERIFICATION=true
            shift
            ;;
        *)
            error "Opci√≥n desconocida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Funci√≥n principal
main() {
    log "üê≥ Iniciando pipeline de instalaci√≥n de Docker..."
    
    # Mostrar informaci√≥n del sistema
    show_system_info
    
    # Verificar si Docker ya est√° instalado
    if check_docker_installed; then
        local version=$(get_docker_version)
        success "Docker ya est√° instalado (versi√≥n: $version)"
        
        if [ "$CHECK_ONLY" = true ]; then
            if check_docker_running; then
                success "Docker est√° funcionando correctamente"
                exit 0
            else
                error "Docker est√° instalado pero no est√° funcionando"
                exit 1
            fi
        fi
        
        if [ "$FORCE_INSTALL" = false ]; then
            warning "Docker ya est√° instalado. Usa -f para forzar reinstalaci√≥n"
            exit 0
        fi
    fi
    
    # Detectar sistema operativo
    local os=$(detect_os)
    log "Sistema operativo detectado: $os"
    
    # Instalar Docker seg√∫n el sistema operativo
    case $os in
        ubuntu)
            install_docker_ubuntu
            ;;
        centos)
            install_docker_centos
            ;;
        macos)
            install_docker_macos
            ;;
        windows)
            install_docker_windows
            ;;
        linux)
            warning "Sistema Linux gen√©rico detectado. Intentando instalaci√≥n para Ubuntu/Debian..."
            install_docker_ubuntu
            ;;
        *)
            error "Sistema operativo no soportado: $os"
            exit 1
            ;;
    esac
    
    # Verificar instalaci√≥n
    if [ "$SKIP_VERIFICATION" = false ]; then
        verify_docker_installation
    fi
    
    success "üéâ Pipeline de instalaci√≥n de Docker completado!"
    
    # Mostrar pr√≥ximos pasos
    echo ""
    info "Pr√≥ximos pasos:"
    echo "1. Reinicia la sesi√≥n o ejecuta: newgrp docker"
    echo "2. Verifica la instalaci√≥n: docker --version"
    echo "3. Ejecuta el proyecto: ./scripts/start.sh"
    echo "4. Accede a pgAdmin4 en: http://localhost:8080"
}

# Ejecutar funci√≥n principal
main "$@"
